module Main where

import           Lib

main :: IO ()
main = do
  let p = 13743559486563523207061838091567871924301218522319958557376100556209020745664120055548900307846728605437696858983369301085715547760267138311521811648034954921105199730106136453011755420978910276475084201589346860190044034685619862413122633854886906062320884038327452248820845436976373140331035057617177385860790015159956061072726798299514329039587292322631565807911916020542090063525916319543490022623095952891917889914809249408136927022636363291175382452090061508131908123911698790754363541715080567
      q = 752692829900013080802406892227895246018833355737155194656702868637718149109645280726900850999778106378444162461698850076454983730862259890692231091501005541309847654860331565063385310313292216445151325988436029828122468537
      d = 170141183460469231731687303715884105727
  print $ "p: " ++ show p
  print $ "q: " ++ show q
  print $ "d: " ++ show d
  print "input message:"
  message <- fmap read getLine
  let privateKey = getPrivateKey d ((p - 1) * (q - 1))
      encodeM = myMod message d (p * q)
      decodeM = myMod encodeM privateKey (p * q)
  print $ "privateKey: " ++ show privateKey
  print $ "encode message: " ++ show encodeM
  print $ "decode message: " ++ show decodeM
